[search]
    n_live_points -> int
        The number of live points used to sample non-linear parameter space. More points provides a more thorough
        sampling of parameter space, at the expense of taking longer to run. The number of live points required for
        accurate sampling depends on the complexity of parameter space.
    bound -> str
        Method used to approximately bound the prior using the current set of live points. Conditions the sampling
        methods used to propose new live points. Choices are no bound ('none'), a single bounding ellipsoid
        ('single'), multiple bounding ellipsoids ('multi'), balls centered on each live point ('balls'), and cubes
        centered on each live point ('cubes'). Default is 'multi'.
    samples -> str
        Method used to sample uniformly within the likelihood constraint, conditioned on the provided bounds.
        Unique methods available are: uniform sampling within the bounds('unif'), random walks with fixed
        proposals ('rwalk'), random walks with variable (“staggering”) proposals ('rstagger'), multivariate slice
        sampling along preferred orientations ('slice'), “random” slice sampling along all orientations ('rslice'),
        “Hamiltonian” slices along random trajectories ('hslice'), and any callable function which follows the
        pattern of the sample methods defined in dynesty.sampling. 'auto' selects the sampling method based on the
        dimensionality of the problem (from ndim). When ndim < 10, this defaults to 'unif'. When 10 <= ndim <= 20,
        this defaults to 'rwalk'. When ndim > 20, this defaults to 'hslice' if a gradient is provided and 'slice'
        otherwise. 'rstagger' and 'rslice' are provided as alternatives for 'rwalk' and 'slice', respectively.
        Default is 'auto'.
    bootstrap -> int
        Compute this many bootstrapped realizations of the bounding objects. Use the maximum distance found to the
        set of points left out during each iteration to enlarge the resulting volumes. Can lead to unstable
        bounding ellipsoids. Default is 0 (no bootstrap).
    enlarge -> float
        Enlarge the volumes of the specified bounding object(s) by this fraction. The preferred method is to
        determine this organically using bootstrapping. If bootstrap > 0, this defaults to 1.0. If bootstrap=0,
        this instead defaults to 1.25.
    vol_dec -> float
        For the 'multi' bounding option, the required fractional reduction in volume after splitting an ellipsoid
        in order to to accept the split. Default is 0.5.
    vol_check -> float
        For the 'multi' bounding option, the factor used when checking if the volume of the original bounding
        ellipsoid is large enough to warrant > 2 splits via ell.vol > vol_check * nlive * pointvol. Default is 2.0.
    walks -> int
        For the 'rwalk' sampling option, the minimum number of steps (minimum 2) before proposing a new live point.
        Default is 25.
    update_interval -> int or float
        If an integer is passed, only update the proposal distribution every update_interval-th likelihood call.
        If a float is passed, update the proposal after every round(update_interval * nlive)-th likelihood call.
        Larger update intervals larger can be more efficient when the likelihood function is quick to evaluate.
        Default behavior is to target a roughly constant change in prior volume, with 1.5 for 'unif', 0.15 * walks
        for 'rwalk' and 'rstagger', 0.9 * ndim * slices for 'slice', 2.0 * slices for 'rslice', and 25.0 * slices
        for 'hslice'.
    facc -> float
        The target acceptance fraction for the 'rwalk' sampling option. Default is 0.5. Bounded to be between
        [1. / walks, 1.].
    slices -> int
        For the 'slice', 'rslice', and 'hslice' sampling options, the number of times to execute a “slice update”
        before proposing a new live point. Default is 5. Note that 'slice' cycles through all dimensions when
        executing a “slice update”.
    fmove -> float
        The target fraction of samples that are proposed along a trajectory (i.e. not reflecting) for the 'hslice'
        sampling option. Default is 0.9.
    max_move -> int
        The maximum number of timesteps allowed for 'hslice' per proposal forwards and backwards in time.
        Default is 100.
    terminate_at_acceptance_ratio -> bool
        If *True*, the sampler will automatically terminate when the acceptance ratio falls behind an input
        threshold value (see *Nest* for a full description of this feature).
    acceptance_ratio_threshold -> float
        The acceptance ratio threshold below which sampling terminates if *terminate_at_acceptance_ratio* is
        *True* (see *Nest* for a full description of this feature).
[updates]
    iterations_per_update -> int
        The number of iterations performed between every Dynesty back-up (via dumping the Dynesty instance as a
        pickle).
[prior_passer]
sigma=3.0
use_errors=True
use_widths=True

[parallel]
    number_of_cores -> int
        The number of cores Emcee sampling is performed using a Python multiprocessing Pool instance. If 1, a
        pool instance is not created and the job runs in serial.