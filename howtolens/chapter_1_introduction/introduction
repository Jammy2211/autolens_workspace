Welcome to HowToLens - The PyAutoLens tutorial!

### JUYPTER NOTEBOOKS ###

The majority of these tutorials are supplied as Juypter Notebooks, which come with a '.ipynb' suffix. For those new to
Python, Juypter Notebooks are a different way to write, view and use Python code. Compared to the traditional Python
scripts, they allow:

- Small blocks of code to be viewed and run at a time
- Images and visualization from a code to be displayed directly underneath it.
- Text script to appear between the blocks of code.

This makes them an ideal way for us to present the HowToLens lecture series, therefore I recommend you get yourself
a Juypter notebook viewer (https://jupyter.org/) if you havent't done so already.

If you *really* want to use Python scripts, all tutorials are supplied a .py python files in the 'scripts' folder of
each chapter.

Finally, its worth noting that for actual PyAutoLens use, I recommend you use Pyton scripts. Therefore, as you go
through the lecture series you will notice that we will transition you to Python scripts in the third chapter.

### CODE STYLE AND FORMATTING ###

When you begin the notebooks, you may notice the style and formatting of our Python code looks different to what you
are used to. For example, it is common for brackets to be placed on their own line at the end of function calls,
the inputs of a function or class may be listed over many separate lines and the code in general takes up a lot more
space then you are used to.

This is all intentional, an is because we believe it makes the cleanest, most readable code possible. In fact - lots
if people do, which is why we use an auto-formatter to produce the code in a standardized format. If you're interested
in the style and would like to adapt it to your own code, check out the Python auto-code formatter 'black'.

https://github.com/python/black

### OVERVIEW OF CHAPTER 1 ###

In this first set of tutorials, we'll learn how to use PyAutoLens. At the end, you'll be able to:

1) Create uniform grids of (x,y) Cartesian coordinates.
2) Combine these grids with light and mass profiles to make images, surface densities, gravitational potentials
   and deflection angle-maps.
3) Combine these light and mass profiles to make galaxies.
4) Perform ray-tracing with these galaxies, whereby a grid is ray-traced through an image-plane / source-plane
   strong lensing configuration.
5) Simulate telescope imaging data of a strong gravitational lens.
6) Fit strong lensing data with model images generated via ray-tracing.
7) Find the model which provides the best-fit to strong gravitational lens imaging.